name: ci-tests
on: 
  push:
  pull_request:
    branches:
      - main
    paths:
      - ./**
      - etl/**
      - ml/**
      - store/**
      - tests/**
      - github/workflows/ci_test.yaml

env:
  AWS_DEFAULT_REGION: 'eu-north-1'
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

jobs:
  test_model:
    name: Test processed code and model
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
     
     #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Run Unit tests
        working-directory: "./"
        run: poetry run pytest tests/

      # - name: Lint
      #   working-directory: "./"
      #   run: poetry run pylint --recursive=y .

      - name: instal dvc
        uses: iterative/setup-dvc@v1
      - name: Pull data and 
        run: dvc pull

      - name: Evaluate model
        run: dvc exp run evaluate

      - name: Iterative CML setup
        uses: iterative/setup-cml@v1
    
      - name: Create CML report
        env:
          REPO_TOKEN: ${{secrets.SECRET_TOKEN}}
        run: |
          # Add the metrics to the report
          dvc metrics show --show-md >> report.md
          # Add the parameters to the report
          cat dvclive/params.yaml >> report.md
          # Create a report in PR
          cml comment create report.md 



